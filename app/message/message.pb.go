// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/message/message.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MSGTYPE int32

const (
	MSGTYPE_VOID    MSGTYPE = 0
	MSGTYPE_MAINCMD MSGTYPE = 1
	MSGTYPE_SUBCMD  MSGTYPE = 2
)

var MSGTYPE_name = map[int32]string{
	0: "VOID",
	1: "MAINCMD",
	2: "SUBCMD",
}

var MSGTYPE_value = map[string]int32{
	"VOID":    0,
	"MAINCMD": 1,
	"SUBCMD":  2,
}

func (x MSGTYPE) String() string {
	return proto.EnumName(MSGTYPE_name, int32(x))
}

func (MSGTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{0}
}

// 错误类型
type ErrorType int32

const (
	ErrorType_VOID3            ErrorType = 0
	ErrorType_LoginFaild       ErrorType = 1
	ErrorType_MatchFaild       ErrorType = 2
	ErrorType_ServefError      ErrorType = 3
	ErrorType_ServerFull       ErrorType = 4
	ErrorType_EntranceRestrict ErrorType = 5
	ErrorType_Kicked           ErrorType = 6
	ErrorType_ShutDown         ErrorType = 7
	ErrorType_GameDown         ErrorType = 40807
	ErrorType_GameMaintenance  ErrorType = 40808
	ErrorType_AgentClose       ErrorType = 44444
	ErrorType_UserBlock        ErrorType = 40403
)

var ErrorType_name = map[int32]string{
	0:     "VOID3",
	1:     "LoginFaild",
	2:     "MatchFaild",
	3:     "ServefError",
	4:     "ServerFull",
	5:     "EntranceRestrict",
	6:     "Kicked",
	7:     "ShutDown",
	40807: "GameDown",
	40808: "GameMaintenance",
	44444: "AgentClose",
	40403: "UserBlock",
}

var ErrorType_value = map[string]int32{
	"VOID3":            0,
	"LoginFaild":       1,
	"MatchFaild":       2,
	"ServefError":      3,
	"ServerFull":       4,
	"EntranceRestrict": 5,
	"Kicked":           6,
	"ShutDown":         7,
	"GameDown":         40807,
	"GameMaintenance":  40808,
	"AgentClose":       44444,
	"UserBlock":        40403,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}

func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{1}
}

type MSGKIND int32

const (
	MSGKIND_VOID1      MSGKIND = 0
	MSGKIND_LOGIN      MSGKIND = 1
	MSGKIND_MATCH      MSGKIND = 2
	MSGKIND_READY      MSGKIND = 3
	MSGKIND_START      MSGKIND = 4
	MSGKIND_END        MSGKIND = 5
	MSGKIND_LEAVE      MSGKIND = 6
	MSGKIND_GAME       MSGKIND = 7
	MSGKIND_ROBOT      MSGKIND = 8
	MSGKIND_CONFIG     MSGKIND = 9
	MSGKIND_ERROR      MSGKIND = 10
	MSGKIND_HANDSEL    MSGKIND = 11
	MSGKIND_BALANCEREQ MSGKIND = 12
	MSGKIND_BALANCE    MSGKIND = 13
)

var MSGKIND_name = map[int32]string{
	0:  "VOID1",
	1:  "LOGIN",
	2:  "MATCH",
	3:  "READY",
	4:  "START",
	5:  "END",
	6:  "LEAVE",
	7:  "GAME",
	8:  "ROBOT",
	9:  "CONFIG",
	10: "ERROR",
	11: "HANDSEL",
	12: "BALANCEREQ",
	13: "BALANCE",
}

var MSGKIND_value = map[string]int32{
	"VOID1":      0,
	"LOGIN":      1,
	"MATCH":      2,
	"READY":      3,
	"START":      4,
	"END":        5,
	"LEAVE":      6,
	"GAME":       7,
	"ROBOT":      8,
	"CONFIG":     9,
	"ERROR":      10,
	"HANDSEL":    11,
	"BALANCEREQ": 12,
	"BALANCE":    13,
}

func (x MSGKIND) String() string {
	return proto.EnumName(MSGKIND_name, int32(x))
}

func (MSGKIND) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{2}
}

type FrameMsg struct {
	MainCmd              int32    `protobuf:"varint,1,opt,name=mainCmd,proto3" json:"mainCmd,omitempty"`
	SubCmd               int32    `protobuf:"varint,2,opt,name=subCmd,proto3" json:"subCmd,omitempty"`
	Buff                 []byte   `protobuf:"bytes,3,opt,name=buff,proto3" json:"buff,omitempty"`
	Time                 int64    `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrameMsg) Reset()         { *m = FrameMsg{} }
func (m *FrameMsg) String() string { return proto.CompactTextString(m) }
func (*FrameMsg) ProtoMessage()    {}
func (*FrameMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{0}
}
func (m *FrameMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameMsg.Merge(m, src)
}
func (m *FrameMsg) XXX_Size() int {
	return m.Size()
}
func (m *FrameMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameMsg.DiscardUnknown(m)
}

var xxx_messageInfo_FrameMsg proto.InternalMessageInfo

func (m *FrameMsg) GetMainCmd() int32 {
	if m != nil {
		return m.MainCmd
	}
	return 0
}

func (m *FrameMsg) GetSubCmd() int32 {
	if m != nil {
		return m.SubCmd
	}
	return 0
}

func (m *FrameMsg) GetBuff() []byte {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *FrameMsg) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

//错误消息
type S2CGeneralError struct {
	EType                ErrorType `protobuf:"varint,1,opt,name=eType,proto3,enum=message.ErrorType" json:"eType,omitempty"`
	Descript             string    `protobuf:"bytes,2,opt,name=descript,proto3" json:"descript,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *S2CGeneralError) Reset()         { *m = S2CGeneralError{} }
func (m *S2CGeneralError) String() string { return proto.CompactTextString(m) }
func (*S2CGeneralError) ProtoMessage()    {}
func (*S2CGeneralError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{1}
}
func (m *S2CGeneralError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGeneralError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGeneralError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGeneralError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGeneralError.Merge(m, src)
}
func (m *S2CGeneralError) XXX_Size() int {
	return m.Size()
}
func (m *S2CGeneralError) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGeneralError.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGeneralError proto.InternalMessageInfo

func (m *S2CGeneralError) GetEType() ErrorType {
	if m != nil {
		return m.EType
	}
	return ErrorType_VOID3
}

func (m *S2CGeneralError) GetDescript() string {
	if m != nil {
		return m.Descript
	}
	return ""
}

//用户准备
type S2CReady struct {
	//用户ID
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CReady) Reset()         { *m = S2CReady{} }
func (m *S2CReady) String() string { return proto.CompactTextString(m) }
func (*S2CReady) ProtoMessage()    {}
func (*S2CReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{2}
}
func (m *S2CReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CReady.Merge(m, src)
}
func (m *S2CReady) XXX_Size() int {
	return m.Size()
}
func (m *S2CReady) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CReady.DiscardUnknown(m)
}

var xxx_messageInfo_S2CReady proto.InternalMessageInfo

func (m *S2CReady) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//用户余额
type S2CBlance struct {
	Balance              int64    `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CBlance) Reset()         { *m = S2CBlance{} }
func (m *S2CBlance) String() string { return proto.CompactTextString(m) }
func (*S2CBlance) ProtoMessage()    {}
func (*S2CBlance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{3}
}
func (m *S2CBlance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CBlance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CBlance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CBlance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CBlance.Merge(m, src)
}
func (m *S2CBlance) XXX_Size() int {
	return m.Size()
}
func (m *S2CBlance) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CBlance.DiscardUnknown(m)
}

var xxx_messageInfo_S2CBlance proto.InternalMessageInfo

func (m *S2CBlance) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

//奖金池
type Handsel struct {
	Roomid               int64    `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Curr                 int64    `protobuf:"varint,2,opt,name=curr,proto3" json:"curr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Handsel) Reset()         { *m = Handsel{} }
func (m *Handsel) String() string { return proto.CompactTextString(m) }
func (*Handsel) ProtoMessage()    {}
func (*Handsel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{4}
}
func (m *Handsel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Handsel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Handsel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Handsel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Handsel.Merge(m, src)
}
func (m *Handsel) XXX_Size() int {
	return m.Size()
}
func (m *Handsel) XXX_DiscardUnknown() {
	xxx_messageInfo_Handsel.DiscardUnknown(m)
}

var xxx_messageInfo_Handsel proto.InternalMessageInfo

func (m *Handsel) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *Handsel) GetCurr() int64 {
	if m != nil {
		return m.Curr
	}
	return 0
}

//奖金池信息
type S2CHandsel struct {
	Handsels             []*Handsel `protobuf:"bytes,1,rep,name=Handsels,proto3" json:"Handsels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2CHandsel) Reset()         { *m = S2CHandsel{} }
func (m *S2CHandsel) String() string { return proto.CompactTextString(m) }
func (*S2CHandsel) ProtoMessage()    {}
func (*S2CHandsel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{5}
}
func (m *S2CHandsel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CHandsel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CHandsel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CHandsel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CHandsel.Merge(m, src)
}
func (m *S2CHandsel) XXX_Size() int {
	return m.Size()
}
func (m *S2CHandsel) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CHandsel.DiscardUnknown(m)
}

var xxx_messageInfo_S2CHandsel proto.InternalMessageInfo

func (m *S2CHandsel) GetHandsels() []*Handsel {
	if m != nil {
		return m.Handsels
	}
	return nil
}

//用户进入
type S2CEnter struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Head                 string   `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	Gold                 int64    `protobuf:"varint,3,opt,name=gold,proto3" json:"gold,omitempty"`
	NickName             string   `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Sign                 string   `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	TableId              int32    `protobuf:"varint,6,opt,name=tableId,proto3" json:"tableId,omitempty"`
	SetId                int32    `protobuf:"varint,7,opt,name=setId,proto3" json:"setId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CEnter) Reset()         { *m = S2CEnter{} }
func (m *S2CEnter) String() string { return proto.CompactTextString(m) }
func (*S2CEnter) ProtoMessage()    {}
func (*S2CEnter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{6}
}
func (m *S2CEnter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CEnter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CEnter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CEnter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CEnter.Merge(m, src)
}
func (m *S2CEnter) XXX_Size() int {
	return m.Size()
}
func (m *S2CEnter) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CEnter.DiscardUnknown(m)
}

var xxx_messageInfo_S2CEnter proto.InternalMessageInfo

func (m *S2CEnter) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *S2CEnter) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *S2CEnter) GetGold() int64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *S2CEnter) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *S2CEnter) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *S2CEnter) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *S2CEnter) GetSetId() int32 {
	if m != nil {
		return m.SetId
	}
	return 0
}

//用户离开
type S2CLeave struct {
	//用户ID
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CLeave) Reset()         { *m = S2CLeave{} }
func (m *S2CLeave) String() string { return proto.CompactTextString(m) }
func (*S2CLeave) ProtoMessage()    {}
func (*S2CLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{7}
}
func (m *S2CLeave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CLeave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CLeave.Merge(m, src)
}
func (m *S2CLeave) XXX_Size() int {
	return m.Size()
}
func (m *S2CLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CLeave.DiscardUnknown(m)
}

var xxx_messageInfo_S2CLeave proto.InternalMessageInfo

func (m *S2CLeave) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//跑马灯配置
type MarqueeConfig struct {
	PlatformId           int64    `protobuf:"varint,1,opt,name=platformId,proto3" json:"platformId,omitempty"`
	AmountLimit          int64    `protobuf:"varint,2,opt,name=amountLimit,proto3" json:"amountLimit,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	RoomId               string   `protobuf:"bytes,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
	RuleId               int64    `protobuf:"varint,5,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	SpecialCondition     string   `protobuf:"bytes,6,opt,name=specialCondition,proto3" json:"specialCondition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarqueeConfig) Reset()         { *m = MarqueeConfig{} }
func (m *MarqueeConfig) String() string { return proto.CompactTextString(m) }
func (*MarqueeConfig) ProtoMessage()    {}
func (*MarqueeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{8}
}
func (m *MarqueeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarqueeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarqueeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarqueeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarqueeConfig.Merge(m, src)
}
func (m *MarqueeConfig) XXX_Size() int {
	return m.Size()
}
func (m *MarqueeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MarqueeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MarqueeConfig proto.InternalMessageInfo

func (m *MarqueeConfig) GetPlatformId() int64 {
	if m != nil {
		return m.PlatformId
	}
	return 0
}

func (m *MarqueeConfig) GetAmountLimit() int64 {
	if m != nil {
		return m.AmountLimit
	}
	return 0
}

func (m *MarqueeConfig) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *MarqueeConfig) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *MarqueeConfig) GetRuleId() int64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *MarqueeConfig) GetSpecialCondition() string {
	if m != nil {
		return m.SpecialCondition
	}
	return ""
}

//跑马灯配置
type S2CMarqueeConfigs struct {
	MarqueeConfigs       []*MarqueeConfig `protobuf:"bytes,1,rep,name=MarqueeConfigs,proto3" json:"MarqueeConfigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *S2CMarqueeConfigs) Reset()         { *m = S2CMarqueeConfigs{} }
func (m *S2CMarqueeConfigs) String() string { return proto.CompactTextString(m) }
func (*S2CMarqueeConfigs) ProtoMessage()    {}
func (*S2CMarqueeConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{9}
}
func (m *S2CMarqueeConfigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CMarqueeConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CMarqueeConfigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CMarqueeConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CMarqueeConfigs.Merge(m, src)
}
func (m *S2CMarqueeConfigs) XXX_Size() int {
	return m.Size()
}
func (m *S2CMarqueeConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CMarqueeConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_S2CMarqueeConfigs proto.InternalMessageInfo

func (m *S2CMarqueeConfigs) GetMarqueeConfigs() []*MarqueeConfig {
	if m != nil {
		return m.MarqueeConfigs
	}
	return nil
}

type GameLog struct {
	UserId               int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameLog) Reset()         { *m = GameLog{} }
func (m *GameLog) String() string { return proto.CompactTextString(m) }
func (*GameLog) ProtoMessage()    {}
func (*GameLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{10}
}
func (m *GameLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameLog.Merge(m, src)
}
func (m *GameLog) XXX_Size() int {
	return m.Size()
}
func (m *GameLog) XXX_DiscardUnknown() {
	xxx_messageInfo_GameLog.DiscardUnknown(m)
}

var xxx_messageInfo_GameLog proto.InternalMessageInfo

func (m *GameLog) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GameLog) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type C2SGameLog struct {
	MatchId              string     `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	GameId               int64      `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameLogs             []*GameLog `protobuf:"bytes,3,rep,name=GameLogs,proto3" json:"GameLogs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *C2SGameLog) Reset()         { *m = C2SGameLog{} }
func (m *C2SGameLog) String() string { return proto.CompactTextString(m) }
func (*C2SGameLog) ProtoMessage()    {}
func (*C2SGameLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_c62a1467467dd6fa, []int{11}
}
func (m *C2SGameLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGameLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGameLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGameLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGameLog.Merge(m, src)
}
func (m *C2SGameLog) XXX_Size() int {
	return m.Size()
}
func (m *C2SGameLog) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGameLog.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGameLog proto.InternalMessageInfo

func (m *C2SGameLog) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *C2SGameLog) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *C2SGameLog) GetGameLogs() []*GameLog {
	if m != nil {
		return m.GameLogs
	}
	return nil
}

func init() {
	proto.RegisterEnum("message.MSGTYPE", MSGTYPE_name, MSGTYPE_value)
	proto.RegisterEnum("message.ErrorType", ErrorType_name, ErrorType_value)
	proto.RegisterEnum("message.MSGKIND", MSGKIND_name, MSGKIND_value)
	proto.RegisterType((*FrameMsg)(nil), "message.FrameMsg")
	proto.RegisterType((*S2CGeneralError)(nil), "message.S2CGeneralError")
	proto.RegisterType((*S2CReady)(nil), "message.S2CReady")
	proto.RegisterType((*S2CBlance)(nil), "message.S2CBlance")
	proto.RegisterType((*Handsel)(nil), "message.Handsel")
	proto.RegisterType((*S2CHandsel)(nil), "message.S2CHandsel")
	proto.RegisterType((*S2CEnter)(nil), "message.S2CEnter")
	proto.RegisterType((*S2CLeave)(nil), "message.S2CLeave")
	proto.RegisterType((*MarqueeConfig)(nil), "message.MarqueeConfig")
	proto.RegisterType((*S2CMarqueeConfigs)(nil), "message.S2CMarqueeConfigs")
	proto.RegisterType((*GameLog)(nil), "message.GameLog")
	proto.RegisterType((*C2SGameLog)(nil), "message.C2SGameLog")
}

func init() { proto.RegisterFile("app/message/message.proto", fileDescriptor_c62a1467467dd6fa) }

var fileDescriptor_c62a1467467dd6fa = []byte{
	// 866 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0x5e, 0xc7, 0x49, 0x1c, 0xbf, 0x69, 0x77, 0x87, 0x51, 0xa9, 0x02, 0x87, 0x28, 0xb2, 0x84,
	0x14, 0xad, 0xaa, 0x22, 0x52, 0x71, 0x01, 0x09, 0xc9, 0x71, 0xbc, 0xd9, 0xa8, 0xf9, 0x80, 0x71,
	0x5a, 0xd4, 0xe3, 0xc4, 0x9e, 0x64, 0xad, 0xf5, 0x47, 0x18, 0x3b, 0x45, 0xfd, 0x27, 0x1c, 0xf8,
	0x05, 0xfd, 0x0b, 0x48, 0xbd, 0xc2, 0x11, 0xc4, 0x91, 0x0b, 0x5a, 0x0e, 0xf0, 0x33, 0xd0, 0x3b,
	0x19, 0x9b, 0xdd, 0xa2, 0x3d, 0xe5, 0x79, 0xde, 0x8f, 0x99, 0xf7, 0x79, 0x5e, 0x4f, 0xe0, 0x23,
	0xbe, 0xdf, 0x7f, 0x9a, 0x8a, 0xa2, 0xe0, 0x3b, 0x51, 0xfd, 0x3e, 0xdd, 0xcb, 0xbc, 0xcc, 0xa9,
	0xa5, 0xa9, 0x13, 0x41, 0xe7, 0x42, 0xf2, 0x54, 0x2c, 0x8a, 0x1d, 0xed, 0x81, 0x95, 0xf2, 0x38,
	0xf3, 0xd2, 0xa8, 0x67, 0x0c, 0x8c, 0x61, 0x8b, 0x55, 0x94, 0x3e, 0x86, 0x76, 0x71, 0xd8, 0x60,
	0xa2, 0xa1, 0x12, 0x9a, 0x51, 0x0a, 0xcd, 0xcd, 0x61, 0xbb, 0xed, 0x99, 0x03, 0x63, 0xf8, 0x80,
	0x29, 0x8c, 0xb1, 0x75, 0x9c, 0x8a, 0x5e, 0x73, 0x60, 0x0c, 0x4d, 0xa6, 0xb0, 0xf3, 0x2d, 0x9c,
	0x05, 0x23, 0x6f, 0x2a, 0x32, 0x21, 0x79, 0xe2, 0x4b, 0x99, 0x4b, 0x3a, 0x84, 0x96, 0x58, 0xbf,
	0xd9, 0x0b, 0x75, 0xd5, 0xe9, 0x88, 0x3e, 0xad, 0x06, 0x54, 0x69, 0xcc, 0xb0, 0x63, 0x01, 0xfd,
	0x18, 0x3a, 0x91, 0x28, 0x42, 0x19, 0xef, 0x4b, 0x75, 0xbd, 0xcd, 0x6a, 0xee, 0x38, 0xd0, 0x09,
	0x46, 0x1e, 0x13, 0x3c, 0x7a, 0x83, 0x43, 0x1e, 0x0a, 0x21, 0x67, 0xc7, 0xe9, 0x4d, 0xa6, 0x99,
	0xf3, 0x09, 0xd8, 0xc1, 0xc8, 0x1b, 0x27, 0x3c, 0x0b, 0x05, 0x6a, 0xdc, 0x70, 0x05, 0x75, 0x55,
	0x45, 0x9d, 0xcf, 0xc1, 0xba, 0xe4, 0x59, 0x54, 0x88, 0x04, 0x4f, 0x92, 0x79, 0x9e, 0xc6, 0xf5,
	0x49, 0x47, 0x86, 0xd2, 0xc2, 0x83, 0x94, 0x6a, 0x0a, 0x93, 0x29, 0xec, 0x7c, 0x01, 0x10, 0x8c,
	0xbc, 0xaa, 0xf3, 0x09, 0x74, 0x34, 0x2c, 0x7a, 0xc6, 0xc0, 0x1c, 0x76, 0x47, 0xa4, 0x16, 0xa6,
	0x13, 0xac, 0xae, 0x70, 0xde, 0x1a, 0x6a, 0x7c, 0x3f, 0x2b, 0x85, 0xbc, 0x6f, 0x7c, 0xbc, 0xf4,
	0x4a, 0xf0, 0x48, 0x4b, 0x57, 0x18, 0x63, 0xbb, 0x3c, 0x89, 0x94, 0xef, 0x26, 0x53, 0x18, 0x6d,
	0xca, 0xe2, 0xf0, 0x7a, 0xc9, 0xb5, 0xf7, 0x36, 0xab, 0x39, 0xd6, 0x17, 0xf1, 0x2e, 0xeb, 0xb5,
	0x8e, 0x67, 0x20, 0x46, 0x27, 0x4a, 0xbe, 0x49, 0xc4, 0x2c, 0xea, 0xb5, 0x8f, 0xdb, 0xd6, 0x94,
	0x3e, 0x82, 0x56, 0x21, 0xca, 0x59, 0xd4, 0xb3, 0x54, 0xfc, 0x48, 0xb4, 0xd5, 0x73, 0xc1, 0x5f,
	0x8b, 0x7b, 0xad, 0xfe, 0xd9, 0x80, 0x87, 0x0b, 0x2e, 0xbf, 0x3b, 0x08, 0xe1, 0xe5, 0xd9, 0x36,
	0xde, 0xd1, 0x3e, 0xc0, 0x3e, 0xe1, 0xe5, 0x36, 0x97, 0x69, 0x5d, 0x7d, 0x2b, 0x42, 0x07, 0xd0,
	0xe5, 0x69, 0x7e, 0xc8, 0xca, 0x79, 0x9c, 0xc6, 0xa5, 0x76, 0xf6, 0x76, 0x08, 0xe7, 0x0c, 0xf3,
	0xac, 0x14, 0x59, 0xa9, 0xe4, 0xda, 0xac, 0xa2, 0xd5, 0x9a, 0x66, 0x91, 0xd6, 0xab, 0x99, 0x8a,
	0x1f, 0x94, 0xb0, 0x96, 0x5e, 0x9f, 0x62, 0xf4, 0x1c, 0x48, 0xb1, 0x17, 0x61, 0xcc, 0x13, 0x2f,
	0xcf, 0xa2, 0xb8, 0x8c, 0xf3, 0x4c, 0x49, 0xb7, 0xd9, 0xff, 0xe2, 0x4e, 0x00, 0x1f, 0x04, 0x23,
	0xef, 0x8e, 0x96, 0x82, 0x7e, 0x05, 0xa7, 0x77, 0x23, 0x7a, 0xc7, 0x8f, 0xeb, 0x1d, 0xdf, 0x49,
	0xb3, 0xf7, 0xaa, 0x9d, 0x2f, 0xc1, 0x9a, 0xf2, 0x54, 0xcc, 0xf3, 0xdd, 0x2d, 0x07, 0x1b, 0x77,
	0xb6, 0x7d, 0xaf, 0x5a, 0x27, 0x01, 0xf0, 0x46, 0x41, 0xd5, 0xaf, 0xde, 0x6a, 0x19, 0x5e, 0x69,
	0x53, 0x6d, 0x56, 0x51, 0x3c, 0x79, 0xc7, 0x53, 0xf1, 0xdf, 0xc9, 0x47, 0x86, 0x9f, 0xa6, 0x6e,
	0x2e, 0x7a, 0xe6, 0x7b, 0x9f, 0xa6, 0x4e, 0xb0, 0xba, 0xe2, 0xfc, 0x09, 0x58, 0x8b, 0x60, 0xba,
	0x7e, 0xf5, 0xb5, 0x4f, 0x3b, 0xd0, 0x7c, 0xb9, 0x9a, 0x4d, 0xc8, 0x09, 0xed, 0x82, 0xb5, 0x70,
	0x67, 0x4b, 0x6f, 0x31, 0x21, 0x06, 0x05, 0x68, 0x07, 0x2f, 0xc6, 0x88, 0x1b, 0xe7, 0xbf, 0x19,
	0x60, 0xd7, 0xef, 0x96, 0xda, 0xd0, 0xc2, 0x86, 0x67, 0xe4, 0x84, 0x9e, 0x02, 0xcc, 0xf3, 0x5d,
	0x9c, 0x5d, 0xf0, 0x38, 0x89, 0x88, 0x81, 0x7c, 0x81, 0x73, 0x1e, 0x79, 0x83, 0x9e, 0x41, 0x37,
	0x10, 0xf2, 0xb5, 0xd8, 0xaa, 0x6e, 0x62, 0x62, 0x81, 0x0a, 0xc8, 0x8b, 0x43, 0x92, 0x90, 0x26,
	0x7d, 0x04, 0xc4, 0xcf, 0x4a, 0x89, 0x2f, 0x94, 0x89, 0xa2, 0x94, 0x71, 0x58, 0x92, 0x16, 0xde,
	0xfd, 0x3c, 0x0e, 0xaf, 0x45, 0x44, 0xda, 0xf4, 0x01, 0x74, 0x82, 0xab, 0x43, 0x39, 0xc9, 0xbf,
	0xcf, 0x88, 0x45, 0x4f, 0x8f, 0x2a, 0x15, 0xfb, 0xfb, 0x5d, 0x83, 0x7e, 0x08, 0x67, 0xc8, 0x17,
	0x3c, 0x46, 0x17, 0xf1, 0x18, 0xf2, 0xcf, 0xbb, 0x06, 0x25, 0x00, 0xee, 0x4e, 0x64, 0xa5, 0x97,
	0xe4, 0x85, 0x20, 0x3f, 0xfe, 0x81, 0x93, 0xd8, 0x2f, 0x0a, 0x21, 0xc7, 0x49, 0x1e, 0x5e, 0x93,
	0xdf, 0x7f, 0x6a, 0x9c, 0xbf, 0x35, 0x94, 0x05, 0xcf, 0x67, 0xcb, 0x49, 0xa5, 0xe8, 0x33, 0x72,
	0x82, 0x70, 0xbe, 0x9a, 0xce, 0x96, 0xc4, 0x40, 0xb8, 0x70, 0xd7, 0xde, 0x25, 0x69, 0x20, 0x64,
	0xbe, 0x3b, 0x79, 0x45, 0x4c, 0x84, 0xc1, 0xda, 0x65, 0x6b, 0xd2, 0xa4, 0x16, 0x98, 0xfe, 0x72,
	0x42, 0x5a, 0xaa, 0xc9, 0x77, 0x5f, 0xfa, 0xa4, 0x8d, 0x6e, 0x4e, 0xdd, 0x85, 0x4f, 0x2c, 0xd5,
	0xb3, 0x1a, 0xaf, 0xd6, 0xa4, 0x83, 0x7a, 0xbc, 0xd5, 0xf2, 0x62, 0x36, 0x25, 0x36, 0x86, 0x7d,
	0xc6, 0x56, 0x8c, 0x00, 0xfa, 0x7d, 0xe9, 0x2e, 0x27, 0x81, 0x3f, 0x27, 0x5d, 0x74, 0x66, 0xec,
	0xce, 0xdd, 0xa5, 0xe7, 0x33, 0xff, 0x1b, 0xf2, 0x00, 0x93, 0x9a, 0x93, 0x87, 0x63, 0xf2, 0xcb,
	0x4d, 0xdf, 0xf8, 0xf5, 0xa6, 0x6f, 0xfc, 0x79, 0xd3, 0x37, 0x7e, 0xf8, 0xab, 0x7f, 0xb2, 0x69,
	0xab, 0x3f, 0xfa, 0x67, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x95, 0x6f, 0x7a, 0x6f, 0x05, 0x06,
	0x00, 0x00,
}

func (m *FrameMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Buff) > 0 {
		i -= len(m.Buff)
		copy(dAtA[i:], m.Buff)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Buff)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SubCmd != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SubCmd))
		i--
		dAtA[i] = 0x10
	}
	if m.MainCmd != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MainCmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CGeneralError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGeneralError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGeneralError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Descript) > 0 {
		i -= len(m.Descript)
		copy(dAtA[i:], m.Descript)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Descript)))
		i--
		dAtA[i] = 0x12
	}
	if m.EType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CBlance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBlance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CBlance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Balance != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Handsel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Handsel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Handsel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Curr != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Curr))
		i--
		dAtA[i] = 0x10
	}
	if m.Roomid != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Roomid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CHandsel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHandsel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CHandsel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Handsels) > 0 {
		for iNdEx := len(m.Handsels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Handsels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2CEnter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CEnter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CEnter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SetId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SetId))
		i--
		dAtA[i] = 0x38
	}
	if m.TableId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TableId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Gold != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Head) > 0 {
		i -= len(m.Head)
		copy(dAtA[i:], m.Head)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Head)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLeave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CLeave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarqueeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarqueeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarqueeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpecialCondition) > 0 {
		i -= len(m.SpecialCondition)
		copy(dAtA[i:], m.SpecialCondition)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SpecialCondition)))
		i--
		dAtA[i] = 0x32
	}
	if m.RuleId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RuleId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AmountLimit != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AmountLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.PlatformId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PlatformId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CMarqueeConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMarqueeConfigs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CMarqueeConfigs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MarqueeConfigs) > 0 {
		for iNdEx := len(m.MarqueeConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarqueeConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *C2SGameLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGameLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGameLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameLogs) > 0 {
		for iNdEx := len(m.GameLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GameLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GameId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MatchId) > 0 {
		i -= len(m.MatchId)
		copy(dAtA[i:], m.MatchId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MatchId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FrameMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MainCmd != 0 {
		n += 1 + sovMessage(uint64(m.MainCmd))
	}
	if m.SubCmd != 0 {
		n += 1 + sovMessage(uint64(m.SubCmd))
	}
	l = len(m.Buff)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovMessage(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CGeneralError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EType != 0 {
		n += 1 + sovMessage(uint64(m.EType))
	}
	l = len(m.Descript)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessage(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CBlance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovMessage(uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Handsel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovMessage(uint64(m.Roomid))
	}
	if m.Curr != 0 {
		n += 1 + sovMessage(uint64(m.Curr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CHandsel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Handsels) > 0 {
		for _, e := range m.Handsels {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CEnter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessage(uint64(m.UserId))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Gold != 0 {
		n += 1 + sovMessage(uint64(m.Gold))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TableId != 0 {
		n += 1 + sovMessage(uint64(m.TableId))
	}
	if m.SetId != 0 {
		n += 1 + sovMessage(uint64(m.SetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CLeave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessage(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarqueeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlatformId != 0 {
		n += 1 + sovMessage(uint64(m.PlatformId))
	}
	if m.AmountLimit != 0 {
		n += 1 + sovMessage(uint64(m.AmountLimit))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RuleId != 0 {
		n += 1 + sovMessage(uint64(m.RuleId))
	}
	l = len(m.SpecialCondition)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CMarqueeConfigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarqueeConfigs) > 0 {
		for _, e := range m.MarqueeConfigs {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMessage(uint64(m.UserId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2SGameLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MatchId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovMessage(uint64(m.GameId))
	}
	if len(m.GameLogs) > 0 {
		for _, e := range m.GameLogs {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FrameMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainCmd", wireType)
			}
			m.MainCmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainCmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCmd", wireType)
			}
			m.SubCmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubCmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buff = append(m.Buff[:0], dAtA[iNdEx:postIndex]...)
			if m.Buff == nil {
				m.Buff = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGeneralError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGeneralError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGeneralError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EType", wireType)
			}
			m.EType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EType |= ErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Descript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBlance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBlance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBlance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Handsel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Handsel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Handsel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curr", wireType)
			}
			m.Curr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHandsel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHandsel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHandsel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handsels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handsels = append(m.Handsels, &Handsel{})
			if err := m.Handsels[len(m.Handsels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CEnter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CEnter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CEnter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarqueeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarqueeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarqueeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			m.PlatformId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountLimit", wireType)
			}
			m.AmountLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialCondition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialCondition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMarqueeConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMarqueeConfigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMarqueeConfigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarqueeConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarqueeConfigs = append(m.MarqueeConfigs, &MarqueeConfig{})
			if err := m.MarqueeConfigs[len(m.MarqueeConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGameLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGameLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGameLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameLogs = append(m.GameLogs, &GameLog{})
			if err := m.GameLogs[len(m.GameLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
